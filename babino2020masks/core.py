# AUTOGENERATED! DO NOT EDIT! File to edit: 00_core.ipynb (unless otherwise specified).

__all__ = ['NYSAPI', 'NEW_YORK_EVENTS']

# Cell
import os
import pandas as pd
import requests
from fastcore.all import *
import seaborn as sns

# Cell
sns.set_style("whitegrid")
sns.set_context("notebook", font_scale=1.5, rc={"lines.linewidth": 2.5})

# Cell
class NYSAPI:
    def __init__(self, usecols=['test_date', 'total_number_of_tests', 'new_positives']):
        self.url_base = "https://health.data.ny.gov/resource/xdss-u53e.csv/"
        self.usecols = usecols
        self.pretty_cols = [x.split('_')[-1].capitalize() for x in self.usecols]

    def get_data(self, offset=0, limit=5000):
        url = self.url_base + f'?$limit={limit}&$offset={offset}'
        return pd.read_csv(url, usecols=self.usecols)[self.usecols]

    def iter_data(self, offset=0, limit=5000):
        df = pd.DataFrame(columns=self.usecols)
        while True:
            df = self.get_data(offset=offset, limit=limit)
            if len(df)==0: return
            offset += limit
            yield  df

    def get_all_data(self):
        df = pd.DataFrame(columns=self.usecols)
        for o in self.iter_data(): df = df.append(o)
        return df

    def get_all_data_nice(self):
        df = self.get_all_data()
        df = df.rename(columns={k:v for k,v in zip(self.usecols, self.pretty_cols)})
        if 'Date' in df.columns: df['Date'] = pd.to_datetime(df['Date'])
        return df

    def get_all_data_state_wide(self, min_date='2020-03-15'):
        '''Gets state wide aggregated data.'''
        df = self.get_all_data_nice()
        assert 'Date' in df.columns, 'data do not have Date column'
        df['date'] = df['Date']
        df = df.groupby('date').sum()
        df['Date'] = pd.to_datetime(df.index)
        df['Odds'] = df.Positives / (df.Tests - df.Positives)
        df = df[df.Date>=min_date]
        return df

# Cell
NEW_YORK_EVENTS = L('03-16-2020 20:00',
                    '03-18-2020 20:00',
                    '03-20-2020 20:00',
                    '03-22-2020 00:00',
                    '04-03-2020 00:00',
                    '04-12-2020 00:00',
                    '04-17-2020 00:00').map(pd.to_datetime)